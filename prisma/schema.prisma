generator client {
  provider = "prisma-client-js"
  // output   = "./@prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

model Movie {
  id          String       @id @default(uuid())
  title       String
  description String?
  releaseYear Int          @map("release_year")
  rating      Float        @default(0.0)
  isPublic    Boolean      @default(false) @map("is_public")
  genre       Genre        @default(DRAMA)
  reviews     Review[]     @relation("movie_reviews")
  createdAt   DateTime     @default(now()) @map("created_at")
  updatedAt   DateTime     @updatedAt @map("updated_at")
  actors      Actor[]      @relation("movie_actors")
  posterId    String?      @unique @map("poster_id")
  poster      MoviePoster? @relation(fields: [posterId], references: [id])

  // index - для того что бы ускорить поиск в базе по данному индексу в запросе
  // @@index([releaseYear, title])

  @@map("movies")
}

model Review {
  id     String  @id @default(uuid())
  text   String
  rating Decimal @default(0.0)

  // связь многие к одному, 1 фильм много отзывов. fields = свзяь от таблицы Movie
  // references = связь с таблицы Movie с таблицей Review по её id

  movie   Movie  @relation("movie_reviews", fields: [movieId], references: [id], onDelete: Cascade)
  movieId String @map("movie_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("reviews")
}

model Actor {
  id   String @id @default(uuid())
  name String

  // связь многие-к-многим, просто пишем массив тут и массив там

  movies    Movie[]  @relation("movie_actors")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("actors")
}

model MoviePoster {
  id  String @id @default(uuid())
  url String

  // свзяь один к одному. 1 постер 1 фильм, здесь просто поле movie и ссылку на таблицу с Movie
  // а в Movie прописыываем связь с таблицей и указывает movieId

  movie Movie? @relation()

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  movieId   String?

  @@map("movie_posters")
}

enum Genre {
  ACTION
  COMEDY
  DRAMA

  @@map("enum_genres")
}
